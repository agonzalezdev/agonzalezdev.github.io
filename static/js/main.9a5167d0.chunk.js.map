{"version":3,"sources":["pages/terminal.tsx","component/dynamicBackground.jsx","pages/home.tsx","Router.tsx","img/cv_img.jpg","component/navBar.jsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Terminal","type","useState","input","setInput","javascriptTerminal","create","content","state","setState","emulatorState","inputStr","onInputChange","onStateChange","promptSymbol","id","options","background","color","value","fpsLimit","fullScreen","enable","interactivity","detectsOn","events","onClick","mode","onHover","resize","modes","bubble","distance","duration","opacity","size","push","quantity","repulse","particles","links","width","collisions","move","direction","outMode","random","speed","straight","number","density","value_area","shape","detectRetina","AppRouter","path","exact","component","props","match","params","MenuContainer","styled","Box","AvatarImage","withTheme","Avatar","theme","spacing","baseFontColor","css","NavBarListIcon","ListItemIcon","NavBarListText","ListItemText","menuItems","icon","Home","text","AssignmentInd","Apps","ContactMail","Navbar","right","showMenu","setShowMenu","toggleSlider","slider","open","AppBar","position","style","Toolbar","IconButton","MenuOpen","Typography","variant","anchor","onClose","src","CVImg","alt","Divider","List","map","item","key","ListItem","button","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a5167d0.chunk.js","sourcesContent":["import { FunctionComponent, useState } from 'react';\r\nimport ReactTerminalStateless from 'react-terminal-component';\r\nimport * as javascriptTerminal from 'javascript-terminal';\r\n\r\ntype TerminalProps = {\r\n  type: string\r\n}\r\n\r\nexport const Terminal: FunctionComponent<TerminalProps> = ({ type }) => { \r\n  const [input, setInput] = useState('');\r\n  const [state, setState] = useState(javascriptTerminal.EmulatorState.create({\r\n    'fs': javascriptTerminal.FileSystem.create({\r\n      '/home': { },\r\n      '/home/README': {content: 'This is a text file'},\r\n      '/home/nested/directory': {},\r\n      '/home/nested/directory/file': {content: 'End of nested directory!'}\r\n    })\r\n  }));\r\n\r\n  return(\r\n    <>\r\n     <ReactTerminalStateless\r\n        emulatorState={state}\r\n        inputStr={input}\r\n        onInputChange={(inputStr) => setInput(inputStr)}\r\n        onStateChange={(emulatorState) => setState(emulatorState)}\r\n        promptSymbol\r\n     />\r\n    </>\r\n  )\r\n}","import Particles from \"react-tsparticles\";\r\n\r\n\r\nexport default () => (\r\n  <Particles\r\n  id=\"tsparticles\"\r\n  options={{\r\n    background: {\r\n      color: {\r\n        value: \"#0d47a1\",\r\n      },\r\n    },\r\n    fpsLimit: 60,\r\n    fullScreen: { enable: true},\r\n    interactivity: {\r\n      detectsOn: \"canvas\",\r\n      events: {\r\n        onClick: {\r\n          enable: true,\r\n          mode: \"push\",\r\n        },\r\n        onHover: {\r\n          enable: true,\r\n          mode: \"repulse\",\r\n        },\r\n        resize: true,\r\n      },\r\n      modes: {\r\n        bubble: {\r\n          distance: 400,\r\n          duration: 2,\r\n          opacity: 0.8,\r\n          size: 40,\r\n        },\r\n        push: {\r\n          quantity: 4,\r\n        },\r\n        repulse: {\r\n          distance: 200,\r\n          duration: 0.4,\r\n        },\r\n      },\r\n    },\r\n    particles: {\r\n      color: {\r\n        value: \"#ffffff\",\r\n      },\r\n      links: {\r\n        color: \"#ffffff\",\r\n        distance: 150,\r\n        enable: true,\r\n        opacity: 0.5,\r\n        width: 1,\r\n      },\r\n      collisions: {\r\n        enable: true,\r\n      },\r\n      move: {\r\n        direction: \"none\",\r\n        enable: true,\r\n        outMode: \"bounce\",\r\n        random: false,\r\n        speed: 2,\r\n        straight: false,\r\n      },\r\n      number: {\r\n        density: {\r\n          enable: true,\r\n          value_area: 500,\r\n        },\r\n        value: 80,\r\n      },\r\n      opacity: {\r\n        value: 0.5,\r\n      },\r\n      shape: {\r\n        type: \"circle\",\r\n      },\r\n      size: {\r\n        random: true,\r\n        value: 5,\r\n      },\r\n    },\r\n    detectRetina: true,\r\n  }}\r\n/>\r\n  )\r\n","import DynamicBackground from '../component/dynamicBackground'\r\nimport React from 'react';\r\n\r\nexport default () => { \r\n  return(\r\n    <>\r\n    <DynamicBackground/>      \r\n    </>\r\n  )\r\n}","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Terminal } from \"./pages/terminal\";\nimport GameStart  from \"./pages/gameStart\";\nimport Home from \"./pages/home\"\nimport React from \"react\";\n\n \n function AppRouter() {\n   return (\n     <Router>\n         <Route path=\"/\" exact component={() => <Home/>} />\n         {/* <Route path=\"/gamestart\" exact component={() => <GameStart/>} /> */}\n         <Route path=\"/terminal/:type\" component={(props: any) => <Terminal type={props.match.params.type} />} />\n     </Router>\n   );\n }\n \n export default AppRouter;","export default __webpack_public_path__ + \"static/media/cv_img.8fe0113c.jpg\";","import React, {useState} from \"react\"\r\nimport { AppBar, Avatar, Box, Divider, IconButton, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography } from \"@material-ui/core\"\r\nimport { Apps, ArrowBack, AssignmentInd, ContactMail, Home, MenuOpen } from \"@material-ui/icons\"\r\nimport CVImg from \"../img/cv_img.jpg\"\r\nimport styled, { css } from 'styled-components'\r\nimport { withTheme } from \"@material-ui/core/styles\";\r\nimport MobileRightMenuSlider from \"@material-ui/core/Drawer\"\r\n\r\nconst MenuContainer = styled(Box)`\r\n  width: 250px;\r\n  background: #511;\r\n  height: 100%;\r\n`\r\n\r\nconst AvatarImage = withTheme(styled(Avatar)`\r\n  &&&{\r\n    display: block;\r\n    margin: 0.5rem auto;\r\n    width: ${props => props.theme.spacing(13)}px;\r\n    height: ${props => props.theme.spacing(13)}px;\r\n  }\r\n`);\r\n\r\nconst baseFontColor = css`\r\n  color: tan;\r\n`\r\n\r\nconst NavBarListIcon = styled(ListItemIcon)`\r\n  &&&{\r\n    ${baseFontColor}\r\n  }\r\n`\r\nconst NavBarListText = styled(ListItemText)`\r\n  ${baseFontColor}\r\n`\r\n\r\nconst menuItems = [\r\n  {\r\n    icon: <Home/>,\r\n    text: \"Home\"\r\n  },\r\n  {\r\n    icon: <AssignmentInd/>,\r\n    text: \"Resume\"\r\n  },\r\n  {\r\n    icon: <Apps/>,\r\n    text: \"Portfolio\"\r\n  },\r\n  {\r\n    icon: <ContactMail/>,\r\n    text: \"Contact\"\r\n  }\r\n]\r\n\r\nconst Navbar = () => {\r\n\r\n  let [showMenu, setShowMenu] = useState({\r\n    right: false\r\n  });\r\n\r\n  const toggleSlider = (slider, open) => {\r\n    setShowMenu({...showMenu, [slider]: open })\r\n  }\r\n\r\n  const sideList = slider => (\r\n    <MenuContainer component=\"div\">\r\n      <AvatarImage src={CVImg} alt=\"Alex González\"/>\r\n      <Divider/>\r\n      <List>\r\n        {menuItems.map((item,key) => (\r\n          <ListItem button key={key}>\r\n            <NavBarListIcon>{item.icon}</NavBarListIcon>\r\n            <NavBarListText>{item.text}</NavBarListText>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </MenuContainer>\r\n  );\r\n\r\n  return(\r\n    <>\r\n    \r\n\r\n\r\n    <Box component=\"nav\">\r\n      <AppBar position=\"static\" style={{background: \"#222\"}}>\r\n        <Toolbar>\r\n          <IconButton onClick={() => toggleSlider(\"right\", true) }>\r\n            <MenuOpen style={{color: \"#b11010\"}}/>\r\n          </IconButton>\r\n          <Typography variant=\"h5\"  style={{color: \"tan\"}}>Alex González</Typography>\r\n        </Toolbar>\r\n        <MobileRightMenuSlider \r\n        anchor=\"right\" \r\n        open={showMenu.right}\r\n        onClose={() => toggleSlider(\"right\", false)}\r\n        >\r\n          {sideList(\"right\")}\r\n        </MobileRightMenuSlider>\r\n      </AppBar>\r\n    </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport AppRouter from './Router';\nimport \"@fontsource/roboto\";\nimport Navbar from './component/navBar';\n\n\nfunction App() {\n  return (\n    <>\n    <Navbar/>\n    <AppRouter/>      \n    </>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}